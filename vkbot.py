from vk_api import VkApi
from vk_api import VkUpload
from vk_api.utils import get_random_id
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
import sqlite3 as sl
import json
import array

GROUP_ID = '220164616'
GROUP_TOKEN = 'vk1.a.TRTCFQ5vdI9-a7r-8uHgS9zEl6lZ_lreUO1KBO8MVl9kFN1XZBslqeiSdysXt_zWLMOXmIit0j3IC6Dhay7L7Dviw692R5X5Rarhd8B0SVOJ2ppkvQR14Sn0w_KBYvDUozV04bfVuAM7bUnDWoYgdCsLZRThhORAHf5gTZSZoDSFn20KRBxGGtpWAgmm0WNX5WssiHcHJsINBrMSWmYLew'
API_VERSION = '5.120'

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç
vk_session = VkApi(token=GROUP_TOKEN, api_version=API_VERSION)
vk = vk_session.get_api()
vk_upload = VkUpload(vk)
longpoll = VkBotLongPoll(vk_session, group_id=GROUP_ID)

settings = dict(one_time=False, inline=False)
settings2 = dict(one_time=False, inline=True)

text_inst = """
1.–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ : "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
2.–ï—Å–ª–∏ –≤—ã –±—ã–ª–∏ —Ä–∞–Ω–µ–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏–≤–æ–∞–Ω—ã –≤ –Ω–∞—à–µ–º TeleGraM –±–æ—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'
"""
text_inst_2 = """
–î–∞–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω!!!!!!
"""
CALLBACK_TYPES = ('show_snackbar', 'open_link', 'open_app', 'text')
HI = ["start","Start","–Ω–∞—á–∞—Ç—å","–ù–∞—á–∞–ª–æ","–ù–∞—á–∞—Ç—å","–Ω–∞—á–∞–ª–æ","–ë–æ—Ç","–±–æ—Ç","–°—Ç–∞—Ä—Ç","—Å—Ç–∞—Ä—Ç","—Å–∫–∏–¥–∫–∏","–°–∫–∏–¥–∫–∏"]
users = []

# –≥–µ–Ω
def keyb_1():
    markup1 = VkKeyboard(**settings)
    markup1.add_button(label='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üëã', color=VkKeyboardColor.NEGATIVE, payload={"type": "text"})
    markup1.add_line()
    markup1.add_button(label='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', color=VkKeyboardColor.POSITIVE, payload={"type": "text"})
    return markup1

def create_keyboard_2():
    markup2 = VkKeyboard(**settings)
    markup2.add_button(label="üìú–ú–µ–Ω—é", color=VkKeyboardColor.PRIMARY, payload={"type": "text"})
    markup2.add_line()
    markup2.add_button(label="üõí–ö–æ—Ä–∑–∏–Ω–∞", color=VkKeyboardColor.PRIMARY, payload={"type": "text"})
    markup2.add_line()
    markup2.add_button(label="‚ùì–ü–æ–¥–¥–µ—Ä–∂–∫–∞ ", color=VkKeyboardColor.PRIMARY, payload={"type": "text"})
    markup2.add_line()
    markup2.add_button(label="üìí–ú–æ–∏ –∑–∞–∫–∞–∑—ã ", color=VkKeyboardColor.PRIMARY, payload={"type": "text"})
    return markup2

def menu_gen(num):
    el_count = 5
    con = sl.connect('tgbase.db')
    categ_k = con.execute(f"SELECT name FROM CATEGORY").fetchall()
    keyb = VkKeyboard(**settings2)
    if el_count * (num + 1) < len(categ_k):
        maxi = el_count * (num + 1)
    else:
        maxi = len(categ_k)
    for a in range(num * el_count, maxi):
        keyb.add_callback_button(label=list(categ_k[a])[0], color=VkKeyboardColor.PRIMARY, payload={"categ": a+1})
        keyb.add_line()
    if num == 0:
        keyb.add_callback_button(label='–î–∞–ª–µ–µ', color=VkKeyboardColor.PRIMARY, payload={"name_2": num + 1})
    elif el_count * (num + 1) >= len(categ_k):
        keyb.add_callback_button(label='–ù–∞–∑–∞–¥', color=VkKeyboardColor.PRIMARY, payload={"name_2": num - 1})
    else:
        keyb.add_callback_button(label='–î–∞–ª–µ–µ', color=VkKeyboardColor.PRIMARY, payload={"name_2": num + 1})
        keyb.add_callback_button(label='–ù–∞–∑–∞–¥', color=VkKeyboardColor.PRIMARY, payload={"name_2": num - 1})
    return keyb

def create_keyb_3(boon):

    keyb = VkKeyboard(**settings2)
    keyb.add_callback_button(label="‚ûñ", color=VkKeyboardColor.PRIMARY, payload={"keyb_3": 2})
    keyb.add_callback_button(label=f"{str(boon+boon)}", color=VkKeyboardColor.PRIMARY, payload={"keyb_3": 5})
    keyb.add_callback_button(label="‚ûï", color=VkKeyboardColor.PRIMARY, payload={"keyb_3": 1})
    keyb.add_line()
    keyb.add_callback_button(label="–ó–∞–∫–∞–∑–∞—Ç—å üìí", color=VkKeyboardColor.PRIMARY, payload={"keyb_3": 3})
    keyb.add_callback_button(label="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üõí", color=VkKeyboardColor.PRIMARY, payload={"keyb_3": 4})
    keyb.add_line()
    keyb.add_callback_button(label="–°–ª–µ–¥—É—é—â–µ–µ –±–ª—é–¥–æ ‚û°Ô∏è", color=VkKeyboardColor.PRIMARY, payload={"keyb_3":6})
    return keyb


def dish_catalog(num):
    el_count = 5
    dish_k = con.execute(f"SELECT name,category FROM DISHES").fetchall()
    keyb_dish = VkKeyboard(**settings2)
    if el_count * num < len(dish_k):
        maxi = el_count * num
    else:
        maxi = len(dish_k)
    for i in range((num-1)*el_count, maxi):
        if num == list(dish_k[i])[1]:
            keyb_dish.add_callback_button(label=list(dish_k[i])[0], color=VkKeyboardColor.PRIMARY,payload={"dish": (dish_k[i])[0]})
            keyb_dish.add_line()
    if num == 1:
        keyb_dish.add_callback_button(label='–î–∞–ª–µ–µ', color=VkKeyboardColor.PRIMARY, payload={"name_3": num + 1})
    elif el_count * num >= len(dish_k):
        keyb_dish.add_callback_button(label='–ù–∞–∑–∞–¥', color=VkKeyboardColor.PRIMARY, payload={"name_3": num - 1})
    else:
        keyb_dish.add_callback_button(label='–î–∞–ª–µ–µ', color=VkKeyboardColor.PRIMARY, payload={"name_3": num + 1})
        keyb_dish.add_callback_button(label='–ù–∞–∑–∞–¥', color=VkKeyboardColor.PRIMARY, payload={"name_3": num - 1})
    return keyb_dish

def dish(objec):
    a = []
    sr = ""
    dish_id = con.execute(f"SELECT id FROM DISHES WHERE stoped={0} AND name ='{objec.object.payload.get('dish')}'").fetchone()
    rating = con.execute(f"SELECT rating FROM rating WHERE dish = {int(dish_id[0])}").fetchone()
    for x in range(len(rating)):
        a.append(rating[x])
    rating_list = (4 + int(sum(a))) / len(rating)
    with con:
        con.execute(f"UPDATE DISHES SET rating = {int(rating_list)} WHERE id = {int(dish_id[0])}")
    dish = con.execute(f"SELECT id,photo,name,weight,description,price,rating FROM DISHES WHERE stoped={0} AND name ='{objec.object.payload.get('dish')}'").fetchone()

    photo = vk_upload.photo_messages(f"C:/Users/ReDWaR/PycharmProjects/pythonProject_telebot/photo/{dish[1]}.png")
    owner_id = photo[0]['owner_id']
    photo_id = photo[0]['id']
    access_key = photo[0]['access_key']
    attachment = f'photo{owner_id}_{photo_id}_{access_key}'
    for a in dish[2:6]:
        sr += f'{str(a)}\n'
    last_id = vk.messages.edit(
        attachment=attachment,
        peer_id=objec.obj.peer_id,
        message=f'{sr}–†–µ–π—Ç–∏–Ω–≥ –±–ª—é–¥–∞: {dish[6]}',
        conversation_message_id=objec.obj.conversation_message_id,
        keyboard=create_keyb_3(1).get_keyboard())


#–°–º–µ–Ω–∞ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def change_id_user(phone,obj):
    print(phone)
    con = sl.connect('tgbase.db')
    try:
        with con:
            con.execute(f"UPDATE USERS SET id_vk = '{obj['from_id']}' WHERE tel = '{phone}'")
        vk.messages.send(
            user_id=obj['from_id'],
            random_id=get_random_id(),
            peer_id=obj['from_id'],
            keyboard=create_keyboard_2().get_keyboard(),
            message=text_inst_2)

    except:
        vk.messages.send(
            user_id=obj['from_id'],
            random_id=get_random_id(),
            peer_id=obj['from_id'],
            message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ")


for event in longpoll.listen():
    con = sl.connect('tgbase.db')
    if event.type == VkBotEventType.MESSAGE_NEW: #–û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ

        if event.obj.message['text'] != '':

            if event.from_user:

                if event.obj.message['text'] in HI:
                    try:
                        user = con.execute(f"SELECT name FROM USERS WHERE id_vk = '{event.obj.message['from_id']}'")
                        vk.messages.send(
                            user_id=event.obj.message['from_id'],
                            random_id=get_random_id(),
                            peer_id=event.obj.message['from_id'],
                            keyboard=create_keyboard_2().get_keyboard(),
                            message=text_inst_2)

                    except:
                        vk.messages.send(
                            user_id=event.obj.message['from_id'],
                            random_id=get_random_id(),
                            peer_id=event.obj.message['from_id'],
                            keyboard=keyb_1().get_keyboard(),
                            message=text_inst)

                elif event.obj.message['text'] == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é':
                    vk.messages.send(
                        user_id=event.obj.message['from_id'],
                        random_id=get_random_id(),
                        peer_id=event.obj.message['from_id'],
                        message="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +375")

                elif '+375' in event.obj.message['text']:
                    change_id_user(event.obj.message['text'], event.obj.message)

                elif event.obj.message['text'] == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üëã':
                    users.append(event.obj.message['from_id'])
                    vk.messages.send(
                        user_id=event.obj.message['from_id'],
                        random_id=get_random_id(),
                        peer_id=event.obj.message['from_id'],
                        message='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è —Å –º–∞–ª–µ–Ω—å–∫–æ–π –±—É–∫–≤—ã')

                elif event.obj.message['text'].islower():
                    users.append(event.obj.message['text'].title())
                    vk.messages.send(
                        user_id=event.obj.message['from_id'],
                        random_id=get_random_id(),
                        peer_id=event.obj.message['from_id'],
                        message='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞—á–∏–Ω–∞—è —Å 375')

                elif "375" in event.obj.message['text']:
                    plus = "+"
                    users.append(f'{plus}{event.obj.message["text"]}')
                    vk.messages.send(
                        user_id=event.obj.message['from_id'],
                        random_id=get_random_id(),
                        peer_id=event.obj.message['from_id'],
                        message="–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞—á–∏–Ω–∞—è —Å —É–ª.")

                elif "—É–ª." in event.obj.message['text']:
                    try:
                        users.append(event.obj.message['text'])
                        con = sl.connect('tgbase.db')
                        with con:
                            con.execute("INSERT OR IGNORE INTO USERS (id_vk,name,tel,address) values(?, ?, ?, ?)", users)
                        vk.messages.send(
                            user_id=event.obj.message['from_id'],
                            random_id=get_random_id(),
                            peer_id=event.obj.message['from_id'],
                            message="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                    except:
                        vk.messages.send(
                            user_id=event.obj.message['from_id'],
                            random_id=get_random_id(),
                            peer_id=event.obj.message['from_id'],
                            message="–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–æ–≤–µ—Ä—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")

                elif event.obj.message['text'] == "üìú–ú–µ–Ω—é":
                    vk.messages.send(
                        user_id=event.obj.message['from_id'],
                        random_id=get_random_id(),
                        peer_id=event.obj.message['from_id'],
                        keyboard=menu_gen(num=0).get_keyboard(),
                        message="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª—é–¥")

                elif event.obj.message['text'] == "üõí–ö–æ—Ä–∑–∏–Ω–∞":
                    vk.messages.send(
                        user_id=event.obj.message['from_id'],
                        random_id=get_random_id(),
                        peer_id=event.obj.message['from_id'],
                        message="–î–∞—Ä–æ–≤–∞ –∫–æ—Ä–æ–≤–∞")
                elif event.obj.message['text'] == "‚ùì–ü–æ–¥–¥–µ—Ä–∂–∫–∞":
                    vk.messages.send(
                        user_id=event.obj.message['from_id'],
                        random_id=get_random_id(),
                        peer_id=event.obj.message['from_id'],
                        message="–î–∞—Ä–æ–≤–∞ –∫–æ—Ä–æ–≤–∞")

                elif event.obj.message['text'] == "üìí–ú–æ–∏ –∑–∞–∫–∞–∑—ã":
                    vk.messages.send(
                        user_id=event.obj.message['from_id'],
                        random_id=get_random_id(),
                        peer_id=event.obj.message['from_id'],
                        message="–î–∞—Ä–æ–≤–∞ –∫–æ—Ä–æ–≤–∞")

                else:
                    vk.messages.send(
                        user_id=event.obj.message['from_id'],
                        random_id=get_random_id(),
                        peer_id=event.obj.message['from_id'],
                        message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

    elif event.type == VkBotEventType.MESSAGE_EVENT:
        if event.object.payload.get('type') in CALLBACK_TYPES:
            vk.messages.sendMessageEventAnswer(
                            event_id=event.object.event_id,
                            user_id=event.object.user_id,
                            peer_id=event.object.peer_id,
                            event_data=json.dumps(event.object.payload))
        elif event.object.payload.get('name_2'):
            last_id = vk.messages.edit(
                peer_id=event.obj.peer_id,
                message='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                conversation_message_id=event.obj.conversation_message_id,
                keyboard=menu_gen(event.object.payload.get("name_2")).get_keyboard())

        elif event.object.payload.get('name_3'):
            last_id = vk.messages.edit(
                peer_id=event.obj.peer_id,
                message='–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ',
                conversation_message_id=event.obj.conversation_message_id,
                keyboard=dish_catalog(event.object.payload.get("name_3")).get_keyboard())

        elif event.object.payload.get('categ'):
            last_id = vk.messages.edit(
                peer_id=event.obj.peer_id,
                message='–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ',
                conversation_message_id=event.obj.conversation_message_id,
                keyboard=dish_catalog(event.object.payload.get('categ')).get_keyboard())

        elif event.object.payload.get('dish'):
            dish(event)
        elif event.object.payload.get("keyb_3") == 1:
            create_keyb_3(1)
            # last_id = vk.messages.edit(
            #     peer_id=event.obj.peer_id,
            #     message = 'h',
            #     conversation_message_id=event.obj.conversation_message_id,
            #     keyboard=create_keyb_3(1).get_keyboard())





if __name__ == '__main__':
    print()